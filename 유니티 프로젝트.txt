B38 (영상1) 

- 캐릭터가 물리현상을 받고 있기 때문에 관성에 의해 캐릭터가 넘어지기도 함. 
->rigidbody > Constraints > freeze rotation > x,y 고정시키면 넘어지지 않음.

- transform 이동은 물리충돌 무시하는 경우 발생하기도 함.
-> rididbody > collision Detection > continuous로 변경
-> cpu를 더 사용하되 더 활발하게 물리적인 계산을 수행함.




B39(영상2)

- 점프하면서 지형물에 박으면 조금 이상함... (벽에 걸쳐지는 느낌..)
-> world space 에서 static 을 yes로 설정 (자식까지) -> 모든 지형물을 정적으로 변경함.
-> 왜? 플레이어는 물리충돌을 무시한 채 나가지 않도록 continuous를 했는데
-> 이거는 부딪히는 상대박이 static이어야 충돌할 때 더 효과적임.

-> 지형물과 플레이어 모두 rigidbody를 가지면 충돌에 대해 더 빠른 계산 가능.
-> 추가하세욥. (use gravity는 끄고(벽 뚫고 떨어지는 거 방지..) is Kinematic은 키기(우리가 코드로 움직이지 않으면 그대로 멈춰있게 설정

- 점프하면서 벽에 달라붙는 걸 방지?
-> 메테리어 -> 피지컬 메테리어 추가, 모두 0으로 설정, 마찰 minimum으로 설정.

- 회피하면서 다른 방향으로 이동되지 않도록 설정하기
-> dodgevector 만들어서 회피할 때(isDodge==true)는 회피방향으로 moveVec를 바꿔줌.




B40(영상3)




B41(영상4)
- 같은 무기 들 때는 변화가 없게, 무기 먹지도 않았는데 사용할 수 있음 -> 변경해야함.
->코드에 제약사항 추가
if(sDown1 && (!hasWeapons[0] || equipWeaponIndex == 0)) return;



B42(영상5)
- 수류탄의 particle이 플레이어의 잔상마냥 남는 것은
particle system에서 simulation space가 world 이면서 emission이 rate over distance일때 이런 모양이 나옴.



B43(영상6)
-Trail Renderer : 잔상을 그려주는 컴포넌트



-----------------
- 코루틴 (Co-Routine) - 시간차 로직 작성을 도움.

//yield //결과를 전달하는 키워드

//1프레임
//yield return null; //1프레임 대기
//2프레임
//yield return null; //yield 키워드 여러 개 사용해 시간차 로직 작성 가능 
//3프레임

//이런 식으로 프레임 사이에 대기를 함.
//프레임말고도 사용가능! 0.1초 쉬려면?
//yield return new WaitForSeconds(0.1f); //주어진 수치(시간)만큼 기다리는 함수
//중간에 그만두고 싶으면 yield break; 사용 (코루틴 탈출) -> 아래 로직이 더 있으면 아래 로직들이 비활성화됨. 조심히 사용할 것.

//box collider와 trail renderer를 켜고, 일정시간이 지나면 다시 끄기.
//invoke 여러번 대신 코루틴(Co-Routine) 사용.
// Use()함수를 메인루틴이라고 함.
// 메인루틴에서 Swing()함수 호출
// Swing()함수를 서브루틴이라고 함.
// 서브루틴이 끝나면 다시 메인루틴인 Use()로 돌아가 아래있는 로직을 순차적으로 수행함.

// 그런데, Swing()함수가 코르틴이라면 조금 다르다.
// 코루틴 함수: 메인루틴 + 코루틴 (Swing()이 호출되는 순간부터 동시 실행)
// Use() 메인루틴 + Swing() 코루틴 - 코는 게임할 때 협동하는 게임에서 (Co-op)이라고 부름(함께라는 뜻)
// 사용방법은? void 지우고 IEnumerator라는 열거형 함수 클래스 사용
// 코루틴은 yield가 꼭 하나 이상 필요.

-------------


B44 (영상7)

-플레이어가 총을 쏠 때 마우스가 향하는 방향으로 총을 쏘도록.
-> 카메라, mouseposition, ray 이용해 turn함수에 추가 구현

-rayHit 마스크를 주지않았기 때문에 벽쪽에서 회전 시 캐릭터의 축이 기울어지는 현상.
(부피가 있는 Collider를 hit 하게 되면 플레이어는 축이 회전을 하게 됩니다.)
-> y축을 아예 0로 만들어 버림.




B45 (영상8)
- 탄피에 부딪히면 자동으로 회전하는 현상
-> 외부 충돌에 의해 rigidbody의 회전속력이 발생 (우리는 transform으로 회전을 구현했기 때문에 rigidbody 회전을 제어할 수가 없음 -> 따로 제어하는 로직 만들어야함.)
-> 먼저 rigidbody에 대해 물리회전속력 0으로 설정
-> 충돌 레이어 설정 (탄피랑 플레이어가 충돌하지 않도록.)
-> 레이어 각각 추가하고(플레이어, 탄피, 총알, 바닥)
-> edit > project settings > physics > Layer Collision Matrix : 레이어들의 상호간 충돌 설정 (충돌할지 말지) 설정해주면 됨.

- 플레이어 벽 관통 방지
-> Raycast이용, isBorder이라는 bool 변수(충돌여부판단) 이용해 Move() 함수에 새로운 제약사항 추가해 보완

- 플레이어와 무기가 충돌했을 때 회전되는 현상
-> e키를 누르면 destroy되지만 누르지 않으면 플레이어가 회전되는 현상 발생
(물리충돌을 담당하는 Collider와 충돌하여 문제 발생)
-> 충돌하지 않도록 설정
-> rigidbody와 sphereCollider 이용하여 아이템 생성 후 바닥에 닿으면 rigidbody가 더이상 외부 물리효과에 의해 움직이지 않도록 설정함. (Item 스크립트)


++ 이전에 했던 마우스 따라 이동하는 부분 보완 필요( 버벅거림, 제대로 돌아가지 않음)
- 문제점?
transform.LookAt(nextVec);
-> transform.LookAt(transform.position + nextVec); 변경해 보완
--> 플레이어가 바라보는 방향을 위에서 구한 상대위치로 변경하는 코드. (B44 강의 40:46)



B46






