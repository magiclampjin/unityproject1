B38 (영상1) 

- 캐릭터가 물리현상을 받고 있기 때문에 관성에 의해 캐릭터가 넘어지기도 함. 
->rigidbody > Constraints > freeze rotation > x,y 고정시키면 넘어지지 않음.

- transform 이동은 물리충돌 무시하는 경우 발생하기도 함.
-> rididbody > collision Detection > continuous로 변경
-> cpu를 더 사용하되 더 활발하게 물리적인 계산을 수행함.




B39(영상2)

- 점프하면서 지형물에 박으면 조금 이상함... (벽에 걸쳐지는 느낌..)
-> world space 에서 static 을 yes로 설정 (자식까지) -> 모든 지형물을 정적으로 변경함.
-> 왜? 플레이어는 물리충돌을 무시한 채 나가지 않도록 continuous를 했는데
-> 이거는 부딪히는 상대박이 static이어야 충돌할 때 더 효과적임.

-> 지형물과 플레이어 모두 rigidbody를 가지면 충돌에 대해 더 빠른 계산 가능.
-> 추가하세욥. (use gravity는 끄고(벽 뚫고 떨어지는 거 방지..) is Kinematic은 키기(우리가 코드로 움직이지 않으면 그대로 멈춰있게 설정

- 점프하면서 벽에 달라붙는 걸 방지?
-> 메테리어 -> 피지컬 메테리어 추가, 모두 0으로 설정, 마찰 minimum으로 설정.

- 회피하면서 다른 방향으로 이동되지 않도록 설정하기
-> dodgevector 만들어서 회피할 때(isDodge==true)는 회피방향으로 moveVec를 바꿔줌.




B40(영상3)




B41(영상4)
- 같은 무기 들 때는 변화가 없게, 무기 먹지도 않았는데 사용할 수 있음 -> 변경해야함.
->코드에 제약사항 추가
if(sDown1 && (!hasWeapons[0] || equipWeaponIndex == 0)) return;



B42(영상5)
- 수류탄의 particle이 플레이어의 잔상마냥 남는 것은
particle system에서 simulation space가 world 이면서 emission이 rate over distance일때 이런 모양이 나옴.



B43(영상6)
-Trail Renderer : 잔상을 그려주는 컴포넌트



-----------------
- 코루틴 (Co-Routine) - 시간차 로직 작성을 도움.

//yield //결과를 전달하는 키워드

//1프레임
//yield return null; //1프레임 대기
//2프레임
//yield return null; //yield 키워드 여러 개 사용해 시간차 로직 작성 가능 
//3프레임

//이런 식으로 프레임 사이에 대기를 함.
//프레임말고도 사용가능! 0.1초 쉬려면?
//yield return new WaitForSeconds(0.1f); //주어진 수치(시간)만큼 기다리는 함수
//중간에 그만두고 싶으면 yield break; 사용 (코루틴 탈출) -> 아래 로직이 더 있으면 아래 로직들이 비활성화됨. 조심히 사용할 것.

//box collider와 trail renderer를 켜고, 일정시간이 지나면 다시 끄기.
//invoke 여러번 대신 코루틴(Co-Routine) 사용.
// Use()함수를 메인루틴이라고 함.
// 메인루틴에서 Swing()함수 호출
// Swing()함수를 서브루틴이라고 함.
// 서브루틴이 끝나면 다시 메인루틴인 Use()로 돌아가 아래있는 로직을 순차적으로 수행함.

// 그런데, Swing()함수가 코르틴이라면 조금 다르다.
// 코루틴 함수: 메인루틴 + 코루틴 (Swing()이 호출되는 순간부터 동시 실행)
// Use() 메인루틴 + Swing() 코루틴 - 코는 게임할 때 협동하는 게임에서 (Co-op)이라고 부름(함께라는 뜻)
// 사용방법은? void 지우고 IEnumerator라는 열거형 함수 클래스 사용
// 코루틴은 yield가 꼭 하나 이상 필요.

-------------


B44 (영상7)





